// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  IC
}

enum PermissionType {
  VIEW
  ADD
  EDIT
  DELETE
}

enum ResourceType {
  DEVICE
  ACCOUNT
  ACCOUNT_DEVICE
  ACTIVATION_CODE
  USERS
  USER_PERMISSIONS
}

model User {
  id                        String              @id @default(uuid())
  localAccountId            String?             @unique
  name                      String
  email                     String              @unique
  role                      Role                @default(IC)
  isActive                  Boolean             @default(true)
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  createdAccounts           Account[]
  createdDevices            Device[]
  createdAccountActivations AccountActivation[]
  createdAccountDevices     AccountDevices[]
  createdUserPermission     UserPermission[]    @relation("CreatedByUser")
  permissions               UserPermission[]    @relation("UserPermissions")
  createdBy                 User?               @relation("CreatedUsers", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById               String?
  createdUsers              User[]              @relation("CreatedUsers")
}

model UserPermission {
  id          String         @id @default(uuid())
  user        User           @relation("UserPermissions", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  resource    ResourceType
  permission  PermissionType @default(VIEW)
  createdBy   User           @relation("CreatedByUser", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([userId, resource, permission]) // prevent duplicates
}

model Account {
  id                    String              @id @default(uuid())
  name                  String
  isActive              Boolean             @default(false)
  activationLink        String?
  publicKey             String?
  pccCloudId            String?
  createdBy             User                @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById           String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  devices               AccountDevices[]
  activations           AccountActivation[]
  ownedSmartLabels      SmartLabel[]        @relation("AccountOwner")
  registeredSmartLabels SmartLabel[]        @relation("AccountCreator")
  ownedItems            Item[]              @relation("AccountOwner")
  registeredItems       Item[]              @relation("AccountCreator")
  transferOut           Transfer[]          @relation("AccountSeller")
  transferIn            Transfer[]          @relation("AccountReceiver")
  publishTokens         PublishToken[]
}

model PublishToken {
  id          String       @id @default(uuid())
  token       String       @default(uuid())
  account     Account      @relation(fields: [accountId], references: [id])
  accountId   String
  isClaimed   Boolean      @default(false)
  isActive    Boolean      @default(true)
  isArchived  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  smartLabels SmartLabel[]
  items       Item[]
  transfers   Transfer[]
}

model AccountActivation {
  id             String    @id @default(uuid())
  account        Account   @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId      String
  email          String
  name           String?
  code           String    @default(uuid())
  activationLink String
  issueDate      DateTime  @default(now())
  expiryDate     DateTime
  isClaimed      Boolean   @default(false)
  claimDate      DateTime?
  createdBy      User      @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Device {
  id          String           @id @default(uuid())
  name        String           @unique //PR-123456789
  isActive    Boolean          @default(true)
  createdBy   User             @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  accounts    AccountDevices[]
}

model AccountDevices {
  id          String   @id @default(uuid())
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId   String
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deviceId    String
  pccCloudId  String?
  isActive    Boolean  @default(true)
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([accountId, deviceId])
  @@index([accountId])
  @@index([deviceId])
  @@index([createdById])
}

model SmartLabel {
  id             String               @id @default(uuid())
  serial         String               @unique
  reference      String?
  name           String?
  description    String?
  payload        Json?
  source         String?
  publishToken   PublishToken         @relation(fields: [publishTokenId], references: [id])
  publishTokenId String
  owner          Account?             @relation("AccountOwner", fields: [ownerId], references: [id])
  ownerId        String?
  registeredBy   Account              @relation("AccountCreator", fields: [registeredById], references: [id])
  registeredById String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  item           Item?                @relation(fields: [itemId], references: [id])
  itemId         String?
  transfers      TransferSmartLabel[]
}

model Item {
  id             String         @id @default(uuid())
  serial         String         @unique
  name           String
  description    String
  payload        Json?
  publishToken   PublishToken   @relation(fields: [publishTokenId], references: [id])
  publishTokenId String
  owner          Account?       @relation("AccountOwner", fields: [ownerId], references: [id])
  ownerId        String?
  registeredBy   Account        @relation("AccountCreator", fields: [registeredById], references: [id])
  registeredById String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  smartLabels    SmartLabel[]
  transfers      TransferItem[]
}

model Transfer {
  id             String               @id @default(uuid())
  reference      String
  seller         Account              @relation("AccountSeller", fields: [sellerId], references: [id])
  sellerId       String
  reciever       Account              @relation("AccountReceiver", fields: [recieverId], references: [id])
  recieverId     String
  transferType   TransferType
  publishToken   PublishToken         @relation(fields: [publishTokenId], references: [id])
  publishTokenId String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  items          TransferItem[]
  smartLabels    TransferSmartLabel[]
}

model TransferItem {
  id         String   @id @default(uuid())
  transfer   Transfer @relation(fields: [transferId], references: [id])
  transferId String
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TransferSmartLabel {
  id           String     @id @default(uuid())
  transfer     Transfer   @relation(fields: [transferId], references: [id])
  transferId   String
  smartLabel   SmartLabel @relation(fields: [smartLabelId], references: [id])
  smartLabelId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum TransferType {
  SMART_LABEL
  ITEM
}
